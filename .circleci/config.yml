version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.6-stretch-browsers
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install AWSCli"
          command: |
            sudo pip install --upgrade pip
            sudo pip install awscli
      - run:
          name: "Login in to AWS ECR"
          command: eval $(aws ecr get-login --region us-east-1 --no-include-email)
      - run:
          name: "Prepare Environment"
          command: |
            echo "export DEBUG=False" >> $BASH_ENV
            env > .env

      - run:
          name: "Build and Push"
          command: |
            export COMMIT_TAG="${ECR_REPOSITORY}:${CIRCLE_SHA1}-${ENV}"
            export TAG_LATEST="${ECR_REPOSITORY}:latest-${ENV}"
            docker build -t $TAG_LATEST -t $COMMIT_TAG .
            docker push $TAG_LATEST
            docker push $COMMIT_TAG

  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: "Prepare Environment"
          command: |
            echo "export DEBUG=False" >> $BASH_ENV
      - run:
          name: "deploy over ssh"
          command: |
            export COMMIT_TAG="${ECR_REPOSITORY}:${CIRCLE_SHA1}-${ENV}"
            export TAG_LATEST="${ECR_REPOSITORY}:latest-${ENV}"
            ssh $SSH_USER_INSTANCE@$SSH_HOST_INSTANCE "cd ~/${CIRCLE_PROJECT_REPONAME} && git fetch && git checkout ${CIRCLE_SHA1} && sudo $(aws ecr get-login --region us-east-1 --no-include-email) && sudo docker pull ${COMMIT_TAG} && sudo docker tag ${COMMIT_TAG} ${ECR_REPOSITORY}:latest && sudo docker-compose up -d"

workflows:
  version: 2
  staging:
    jobs:
      - build:
          context: staging
          filters:
            branches:
              only:
                - staging

      - deploy:
          context: staging
          requires:
            - build
          filters:
            branches:
              only:
                - staging

  production:
    jobs:
      - build:
          context: production
          filters:
            branches:
              only:
                - master

      - deploy:
          context: production
          requires:
            - build
          filters:
            branches:
              only:
                - master